@file:Suppress("UNUSED_PARAMETER")

package lesson2

import java.io.File

/**
 * Получение наибольшей прибыли (она же -- поиск максимального подмассива)
 * Простая
 *
 * Во входном файле с именем inputName перечислены цены на акции компании в различные (возрастающие) моменты времени
 * (каждая цена идёт с новой строки). Цена -- это целое положительное число. Пример:
 *
 * 201
 * 196
 * 190
 * 198
 * 187
 * 194
 * 193
 * 185
 *
 * Выбрать два момента времени, первый из них для покупки акций, а второй для продажи, с тем, чтобы разница
 * между ценой продажи и ценой покупки была максимально большой. Второй момент должен быть раньше первого.
 * Вернуть пару из двух моментов.
 * Каждый момент обозначается целым числом -- номер строки во входном файле, нумерация с единицы.
 * Например, для приведённого выше файла результат должен быть Pair(3, 4)
 *
 * В случае обнаружения неверного формата файла бросить любое исключение.
 * Трудоемкость - O(n)
 * Ресурсоемкость - О(n)
 */
fun optimizeBuyAndSell(inputName: String): Pair<Int, Int> {
    val file = File(inputName).readLines()
    var min = Integer.MAX_VALUE
    var maxD = Integer.MIN_VALUE
    var inds = Pair(-1, -1)
    var newMinI = -1
    for (i in file.indices) {
        if (!file[i].matches(Regex("""\d*"""))) throw IllegalArgumentException()
        val numb = file[i].toInt()
        if (numb - min > maxD) {
            maxD = numb - min
            inds = Pair(newMinI + 1, i + 1)
        } else if (numb < min) {
            min = numb
            newMinI = i
        }
    }
    return inds
}

/**
 * Задача Иосифа Флавия.
 * Простая
 *
 * Образовав круг, стоят menNumber человек, пронумерованных от 1 до menNumber.
 *
 * 1 2 3
 * 8   4
 * 7 6 5
 *
 * Мы считаем от 1 до choiceInterval (например, до 5), начиная с 1-го человека по кругу.
 * Человек, на котором остановился счёт, выбывает.
 *
 * 1 2 3
 * 8   4
 * 7 6 х
 *
 * Далее счёт продолжается со следующего человека, также от 1 до choiceInterval.
 * Выбывшие при счёте пропускаются, и человек, на котором остановился счёт, выбывает.
 *
 * 1 х 3
 * 8   4
 * 7 6 Х
 *
 * Процедура повторяется, пока не останется один человек. Требуется вернуть его номер (в данном случае 3).
 *
 * 1 Х 3
 * х   4
 * 7 6 Х
 *
 * 1 Х 3
 * Х   4
 * х 6 Х
 *
 * х Х 3
 * Х   4
 * Х 6 Х
 *
 * Х Х 3
 * Х   х
 * Х 6 Х
 *
 * Х Х 3
 * Х   Х
 * Х х Х
 *
 * Общий комментарий: решение из Википедии для этой задачи принимается,
 * но приветствуется попытка решить её самостоятельно.
 *
 * Трудоемкость - O(n)
 * Ресурсоемкость - О(1)
 */

fun josephTask(menNumber: Int, choiceInterval: Int): Int {
    var ans = 0
    for (i in 1..menNumber)
        ans = (ans + choiceInterval) % i
    return ans + 1
}

/**
 * Наибольшая общая подстрока.
 * Средняя
 *
 * Дано две строки, например ОБСЕРВАТОРИЯ и КОНСЕРВАТОРЫ.
 * Найти их самую длинную общую подстроку -- в примере это СЕРВАТОР.
 * Если общих подстрок нет, вернуть пустую строку.
 * При сравнении подстрок, регистр символов *имеет* значение.
 * Если имеется несколько самых длинных общих подстрок одной длины,
 * вернуть ту из них, которая встречается раньше в строке first.
 *
 * Трудоемкость - O(m*n)
 * Ресурсоемкость - О(n)
 * m - длина первой строки, n - второй
 */
fun longestCommonSubstring(first: String, second: String): String {
    val array = IntArray(second.length)
    var maxLen = 0
    var maxLenIndex = 0
    for (ch in first) {
        for (i in array.size - 1 downTo 0) {
            if (second[i] == ch) {
                array[i] = 1 + if (i == 0) 0 else array[i - 1]
                if (array[i] > maxLen) {
                    maxLen = array[i]
                    maxLenIndex = i
                }
            } else array[i] = 0
        }
    }
    return second.substring(maxLenIndex - maxLen + 1..maxLenIndex)
}

/**
 * Число простых чисел в интервале
 * Простая
 *
 * Рассчитать количество простых чисел в интервале от 1 до limit (включительно).
 * Если limit <= 1, вернуть результат 0.
 *
 * Справка: простым считается число, которое делится нацело только на 1 и на себя.
 * Единица простым числом не считается.
 */
fun calcPrimesNumber(limit: Int): Int {
    TODO()
}
